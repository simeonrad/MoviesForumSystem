{"openapi":"3.0.1","info":{"title":"Movie Forum","version":"1.0"},"servers":[{"url":"http://localhost:8080","description":"Generated server url"}],"paths":{"/api/users":{"get":{"tags":["user-controller"],"summary":"Getting a list with all the users","description":"This method is used for getting a list with all the users. Requires Basic Authentication.","operationId":"get","parameters":[{"name":"username","in":"query","description":"The username of the user you want to get.","required":false,"schema":{"type":"string"}},{"name":"email","in":"query","description":"The email of the user you want to get.","required":false,"schema":{"type":"string"}},{"name":"firstName","in":"query","description":"The first name of the user you want to get.","required":false,"schema":{"type":"string"}},{"name":"sortBy","in":"query","description":"The sort by method for the user you want to sort.","required":false,"schema":{"type":"string"}},{"name":"sortOrder","in":"query","description":"The sort order for the user you want to order.","required":false,"schema":{"type":"string"}}],"responses":{"200":{"description":"Successful retrieval of users","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/User"}}}}},"400":{"description":"Wrong given query parameters","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/User"}}}}},"401":{"description":"Wrong username or password.","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/User"}}}}},"404":{"description":"There is no such user.","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/User"}}}}}}},"put":{"tags":["user-controller"],"summary":"Updating a user","description":"This method is used for updating a user.","operationId":"updateUser","parameters":[{"name":"Authorization","in":"header","description":"Basic authentication header","required":true,"schema":{"type":"string"}}],"requestBody":{"description":"In the request body, include username (min = 4, max = 50), password (min = 8, max = 50), firstName (min = 4, max = 32), lastName (min = 2, max = 32), and email (min = 10, max = 100).","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserDto"}}}},"responses":{"200":{"description":"Successful user update","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserShow"}}}},"401":{"description":"Wrong username or password.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserShow"}}}},"404":{"description":"There is no such user.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserShow"}}}},"409":{"description":"If the email is already in use.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserShow"}}}}}},"post":{"tags":["user-controller"],"summary":"Creating a user","description":"This method is used for creating a user.","operationId":"createUser","requestBody":{"description":"In the request body you need to include username(min = 4, max = 50), password(min = 8, max = 50), firstName(min = 4, max = 32), lastName(min = 2, max = 32) and email(min = 10, max = 100)","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserDto"}}}},"responses":{"200":{"description":"Successful user creation","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserShow"}}}},"409":{"description":"User with same username exists.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserShow"}}}},"422":{"description":"Invalid email.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserShow"}}}}}},"delete":{"tags":["user-controller"],"summary":"Deleting a user","description":"This method is used for deleting a user.","operationId":"deleteUser","parameters":[{"name":"username","in":"query","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Successful deletion of user","content":{"*/*":{"schema":{"type":"string"}}}},"401":{"description":"Wrong username or password.","content":{"*/*":{"schema":{"type":"string"}}}},"404":{"description":"There is no such user.","content":{"*/*":{"schema":{"type":"string"}}}}}}},"/api/users/unmakeAdmin":{"put":{"tags":["user-controller"],"summary":"Unmaking user an admin","description":"This method is used for unmaking user an admin.","operationId":"unmakeUserAdmin","parameters":[{"name":"username","in":"query","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Successful removal of admin privileges","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserShowAdmin"}}}},"401":{"description":"Wrong username or password.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserShowAdmin"}}}},"404":{"description":"There is no such user.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserShowAdmin"}}}}}}},"/api/users/unblock":{"put":{"tags":["user-controller"],"summary":"Unblocking a user","description":"This method is used to unblock a user.","operationId":"unblockUser","parameters":[{"name":"username","in":"query","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Successful unblocking of user","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserShowAdmin"}}}},"401":{"description":"Wrong username or password.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserShowAdmin"}}}},"404":{"description":"There is no such user.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserShowAdmin"}}}}}}},"/api/users/makeAdmin":{"put":{"tags":["user-controller"],"summary":"Making user an admin","description":"This method is used to make a user an admin.","operationId":"makeUserAdmin","parameters":[{"name":"username","in":"query","required":true,"schema":{"type":"string"}},{"name":"phoneNumber","in":"query","required":false,"schema":{"type":"string"}}],"responses":{"200":{"description":"Successfully made user an admin","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserShowAdmin"}}}},"401":{"description":"Wrong username or password.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserShowAdmin"}}}},"404":{"description":"There is no such user.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserShowAdmin"}}}}}}},"/api/users/block":{"put":{"tags":["user-controller"],"summary":"Blocking a user","description":"This method is used to block a user.","operationId":"blockUser","parameters":[{"name":"username","in":"query","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Successful blockage of user","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserShowAdmin"}}}},"401":{"description":"Unauthorized access - wrong username or password.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserShowAdmin"}}}},"404":{"description":"User not found - there is no such user.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/UserShowAdmin"}}}}}}},"/api/posts/{postId}/like":{"put":{"tags":["post-controller"],"summary":"Liking a post","description":"This method is used for liking a certain post. If you use the method after you have already liked it, you will unlike the certain post.","operationId":"likePost","parameters":[{"name":"postId","in":"path","description":"The ID of the post you are trying to like.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Successfully liked or unliked post"},"401":{"description":"Unauthorized access - wrong username or password."},"404":{"description":"Post not found - there is no such post."}}}},"/api/posts/post/{postId}":{"put":{"tags":["post-controller"],"summary":"Update a post","description":"This method is used for updating a post. If the user from headers is not the author of the post, access will be denied.","operationId":"updatePost","parameters":[{"name":"postId","in":"path","description":"Path variable that is the ID of the post you are trying to edit.","required":true,"schema":{"type":"string"}}],"requestBody":{"description":"Include title (min = 16, max = 64) and content (min = 32, max = 8192) in the request body.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PostView"}}}},"responses":{"200":{"description":"Successful updating of a post","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommentDto"}}}},"401":{"description":"Unauthorized access - wrong username or password, or the user is not the author of the post.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/PostDto"}}}},"404":{"description":"No such post found.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/PostDto"}}}}}},"post":{"tags":["post-controller"],"summary":"Commenting on a post","description":"This method is used for creating and adding a comment to a certain post. Ensure the comment does not contain forbidden content.","operationId":"commentOnPost","parameters":[{"name":"postId","in":"path","description":"The ID of the post you are trying to comment on.","required":true,"schema":{"type":"string"}}],"requestBody":{"description":"Include content in the request body (min = 1, max = 500 characters).","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommentDto"}}}},"responses":{"200":{"description":"Successful comment creation and adding it to a post","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommentDto"}}}},"401":{"description":"Unauthorized access - wrong username or password.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/CommentDto"}}}},"404":{"description":"Post not found - there is no such post.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/CommentDto"}}}},"403":{"description":"Forbidden - the content in the comment contains forbidden content.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/CommentDto"}}}}}}},"/comments/comment/{commentId}":{"get":{"tags":["comment-controller"],"summary":"Get replies to a comment","description":"This method is used for getting all replies to a certain comment","operationId":"getRepliesToComment","parameters":[{"name":"commentId","in":"path","description":"This is the Id of the comment you are trying get the replies of.","required":true,"schema":{"type":"integer","format":"int32"}}],"responses":{"200":{"description":"Successful got some replies to a existing comment","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommentDto"}}}},"404":{"description":"There is no such comment or there aren't any replies to it.","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/CommentDto"}}}}}}},"post":{"tags":["comment-controller"],"summary":"Replying on a comment","description":"This method is used for creating and adding a reply to a certain comment. Ensure the reply does not contain forbidden content.","operationId":"replyToComment","parameters":[{"name":"commentId","in":"path","description":"The ID of the comment you are trying to reply to.","required":true,"schema":{"type":"string"}}],"requestBody":{"description":"Include content in the request body (min = 1, max = 500 characters).","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommentDto"}}}},"responses":{"200":{"description":"Successful reply creation and adding it to a comment","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommentDto"}}}},"401":{"description":"Unauthorized access - wrong username or password.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/CommentDto"}}}},"404":{"description":"Comment not found - there is no such comment.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/CommentDto"}}}},"403":{"description":"Forbidden - the content in the reply contains forbidden content.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/CommentDto"}}}}}},"delete":{"tags":["comment-controller"],"summary":"Deleting a comment","description":"This method is used for deleting and removing a comment from a certain post. Ensure the user has the necessary permissions to delete the comment.","operationId":"deleteComment","parameters":[{"name":"commentId","in":"path","description":"The ID of the comment you are trying to delete.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Successful deletion of the comment","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommentDto"}}}},"401":{"description":"Unauthorized access - wrong username or password."},"404":{"description":"Comment not found - there is no such comment."},"403":{"description":"Forbidden - the user does not have permission to delete this comment."}}}},"/api/posts":{"get":{"tags":["post-controller"],"summary":"Getting all posts","description":"This method is used for getting all non deleted posts.","operationId":"getAllPosts","responses":{"200":{"description":"Successful got all posts.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PostView"}}}},"404":{"description":"There aren't any posts.","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/PostDto"}}}}}}},"post":{"tags":["post-controller"],"summary":"Creating a post","description":"This method is used for creating a post. Ensure the title and content adhere to the specified length requirements.","operationId":"createPost","requestBody":{"description":"Include title (min = 16, max = 64 characters) and content (min = 32, max = 8192 characters) in the request body.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PostView"}}}},"responses":{"200":{"description":"Successful creation of a post","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PostDto"}}}},"401":{"description":"Unauthorized access - wrong username or password.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/PostDto"}}}}}}},"/api/posts/{postId}":{"get":{"tags":["post-controller"],"summary":"Getting a single post","description":"This method is used for getting a certain post by Id.","operationId":"getPostById","parameters":[{"name":"postId","in":"path","description":"this is the Id of the post you are trying to get.","required":true,"schema":{"type":"integer","format":"int32"}}],"responses":{"200":{"description":"Successful got a post.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PostView"}}}},"404":{"description":"There is no such post.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/PostDto"}}}}}},"delete":{"tags":["post-controller"],"summary":"Deleting a post","description":"This method is used for deleting a post. The operation requires that the requester is either the author of the post or an admin.","operationId":"deletePost","parameters":[{"name":"postId","in":"path","description":"The ID of the post you are trying to delete.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Successful deletion of a post"},"401":{"description":"Unauthorized access - wrong username or password, or the requester is neither the author of the post nor an admin."},"404":{"description":"Post not found - no such post found."}}}},"/api/posts/api/post/{postId}":{"get":{"tags":["post-controller"],"summary":"Get comments to a post","description":"This method is used for getting all comments to a certain post","operationId":"getCommentsOnPost","parameters":[{"name":"postId","in":"path","description":"This is the Id of the post you are trying get the comments of.","required":true,"schema":{"type":"integer","format":"int32"}}],"responses":{"200":{"description":"Successful got some comments to a existing post","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommentDto"}}}},"404":{"description":"There is no such post or there aren't any comments on it.","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/CommentDto"}}}}}}}}},"components":{"schemas":{"UserDto":{"required":["email","firstName","lastName","password","username"],"type":"object","properties":{"username":{"maxLength":50,"minLength":4,"type":"string"},"password":{"maxLength":50,"minLength":8,"type":"string"},"firstName":{"maxLength":32,"minLength":4,"type":"string"},"lastName":{"maxLength":32,"minLength":2,"type":"string"},"email":{"maxLength":100,"minLength":10,"type":"string"},"phoneNumber":{"type":"string"}}},"UserShow":{"type":"object","properties":{"username":{"type":"string"},"firstName":{"type":"string"},"lastName":{"type":"string"},"email":{"type":"string"}}},"UserShowAdmin":{"type":"object","properties":{"username":{"type":"string"},"firstName":{"type":"string"},"lastName":{"type":"string"},"email":{"type":"string"},"admin":{"type":"boolean"},"blocked":{"type":"boolean"}}},"PostView":{"type":"object","properties":{"viewId":{"type":"integer","format":"int32"},"postId":{"type":"integer","format":"int32"},"userId":{"type":"integer","format":"int32"},"timestamp":{"type":"string","format":"date-time"}}},"CommentDto":{"required":["content"],"type":"object","properties":{"content":{"maxLength":500,"minLength":1,"type":"string"},"timeStamp":{"type":"string","format":"date-time"}}},"PostDto":{"required":["content","title"],"type":"object","properties":{"id":{"type":"integer","format":"int32"},"authorId":{"type":"integer","format":"int32"},"title":{"maxLength":64,"minLength":16,"type":"string"},"content":{"maxLength":8192,"minLength":32,"type":"string"},"likes":{"type":"integer","format":"int32"},"timeStamp":{"type":"string","format":"date-time"},"tag":{"uniqueItems":true,"type":"array","items":{"$ref":"#/components/schemas/Tag"}}}},"Tag":{"type":"object","properties":{"id":{"type":"integer","format":"int32"},"name":{"type":"string"}}},"User":{"type":"object","properties":{"id":{"type":"integer","format":"int32"},"username":{"type":"string"},"password":{"type":"string"},"firstName":{"type":"string"},"lastName":{"type":"string"},"email":{"type":"string"},"isBlocked":{"type":"boolean"},"profilePhotoUrl":{"type":"string"},"deleted":{"type":"boolean"},"admin":{"type":"boolean"}}}}}}